#!/usr/bin/python
#
# Helper script for creating a completely standalone postgresql server instance
# inside python or via the command line. Can be used for automatic testing,
# etc. where a fully featured PostgreSQL is needed.
#
# Depends on postgresql global installation.
# Tested on Ubuntu with latest PGDG repository versions for 9.1 and 9.3.
#
# Copyright (c) 2014, Teemu Haapoja <teemu.haapoja@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

if __name__ == "__main__":
	import argparse
	from pgtestenv.instance import PgInstance

	parser = argparse.ArgumentParser(description="Create a simple PostgreSQL test environment")
	parser.add_argument('datadir')
	
	subparsers = parser.add_subparsers()

	parser_initdb = subparsers.add_parser('initdb',description="Initialize database")
	parser_initdb.set_defaults(action="initdb")
	parser_initdb.add_argument('version')
	parser_initdb.add_argument('--port', default="5432")
	parser_initdb.add_argument('--superuser', default="postgres")

	parser_start = subparsers.add_parser('start',description="Start server")
	parser_start.set_defaults(action="start")
	parser_start.add_argument('--port', default=None)

	parser_stop = subparsers.add_parser('stop',description="Stop server")
	parser_stop.set_defaults(action="stop")

	parser_stop = subparsers.add_parser('info',description="Show information")
	parser_stop.set_defaults(action="info")	

	parser_connect = subparsers.add_parser('test',description="Test a connection to the database")
	parser_connect.set_defaults(action="test")
	parser_connect.add_argument('--user', default=None)
	parser_connect.add_argument('--port', default="5432")

	parser_clean = subparsers.add_parser('clean',description="Clean data files")
	parser_clean.set_defaults(action="clean")

	#####################################
	args = parser.parse_args()

	pg = PgInstance(args.datadir, clean_on_delete=False)

	if args.action == 'initdb':
		pg.initdb(args.version, port=args.port, superuser=args.superuser)
	elif args.action == 'start':
		pg.start(args.port)
	elif args.action == 'stop':
		pg.stop()
	elif args.action == 'info':
		print pg.info()
	elif args.action == 'test':
		print pg.test_connection(user=args.user,port=args.port)
	elif args.action == 'clean':
		pg.clean(confirm=True)
